import math
import datetime
import netCDF4

# takes filename of precip file and returns datetime, assumes format ..\MSWEP_daily\{YEAR}\{YEAR}{DAY}.nc
def parse_precip_filename(f):
    return datetime.datetime.strptime(f.split("/")[-1],"%Y%j.nc")

# takes filename of freq or avg-intensity filename and returns the equivalent time value
def parse_output_filename(f):
    # year_season_misc.csv
    tokens = f.split("_")

    if tokens[0].isdigit():
        year = int(tokens[0])
    else:
        year = 0
    if len(tokens) == 1:
        return year

    season_labels = ["DJF", "MAM", "JJA", "SON"]
    season = season_labels.index(tokens[1])
    return year + (season * 0.25) + 2/12

# inverse of parse_output_filename
def time_val_to_label(t):
    year = math.floor(t)
    season_labels = ["DJF", "MAM", "JJA", "SON"]

    season_index = math.floor((t - year) * 4)

    return f"{str(year)}_{season_labels[season_index]}"

def save_NETCDF(lon, lat, data, data_name, data_units, data_descrip, path, fname, ftitle):
    print(f"Saving {path}{fname}...")
    ds = netCDF4.Dataset(f"{path}{fname}", 'w', format='NETCDF4')

    # Define dimensions
    ds.createDimension('south_north', lon.shape[0])
    ds.createDimension('west_east', lon.shape[1])

    # Define variables
    lat_var = ds.createVariable('LAT', 'f4', ('south_north', 'west_east'), zlib=True)
    lon_var = ds.createVariable('LONG', 'f4', ('south_north', 'west_east'), zlib=True)
    precip_var = ds.createVariable(data_name, 'f4', ('south_north', 'west_east'), zlib=True)

    # Set attributes to match original
    lat_var.units = "degree_north"
    lat_var.description = "latitude, south is negative"
    lat_var.MemoryOrder = "XY"
    lat_var.FieldType = 104
    lat_var.stagger = ""

    lon_var.units = "degree_east"
    lon_var.description = "longitude, west is negative"
    lon_var.MemoryOrder = "XY"
    lon_var.FieldType = 104
    lon_var.stagger = ""

    precip_var.units = data_units
    precip_var.long_name = data_descrip

    # Write data
    lat_var[:, :] = lat
    lon_var[:, :] = lon
    precip_var[:, :] = data

    # Global attributes (optional)
    ds.title = ftitle
    ds.source = "Generated by custom script"
    ds.close()